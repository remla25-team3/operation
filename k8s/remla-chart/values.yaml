# operation/k8s/remla-chart/values.yaml

replicaCount: 1

appFrontend:
  name: app-frontend
  image:
    repository: ghcr.io/remla25-team3/app-frontend
    tag: v1.3.2
    tagCanary: v1.3.3-canary
    pullPolicy: IfNotPresent
  servicePort: 80
  containerPort: 80
  replicas: 1

appService:
  name: app-service
  image:
    repository: ghcr.io/remla25-team3/app-service
    tag: v1.5.0
    pullPolicy: IfNotPresent
  servicePort: 5000
  containerPort: 5000
  replicas: 1
  configData:
    IS_PRODUCTION: "false"
    LOG_LEVEL: "info"
  env:
    - name: PORT
      value: "{{ .Values.appService.servicePort }}"
    - name: MODEL_SERVICE_URL
      value: "{{ .Release.Name }}-{{ .Values.modelService.name }}"
    - name: MODEL_SERVICE_PORT
      value: "{{ .Values.modelService.servicePort }}"

modelService:
  name: model-service
  image:
    repository: ghcr.io/remla25-team3/model-service
    tag: v0.4.1
    pullPolicy: IfNotPresent
  servicePort: 5000
  containerPort: 5000
  replicas: 1
  env:
    - name: PORT
      value: "{{ .Values.modelService.servicePort }}"
    - name: RESOURCE_URL
      value: "https://github.com/remla25-team3/model-training/releases/download/"
    - name: MODEL
      value: "sentiment_model.pkl"
    - name: CV
      value: "bow_sentiment_model.pkl"
    - name: MODEL_VERSION
      value: "v0.2.3"
  persistence:
    enabled: false
    size: 1Gi

serviceMonitor:
  enabled: true
  path: /metrics
  interval: 30s
  prometheusRelease: "prometheus-stack"

kube-prometheus-stack:

  grafana:
    service:
      type: LoadBalancer
      loadBalancerIP: "192.168.56.92"

  prometheus:
    service:
      type: LoadBalancer
      loadBalancerIP: "192.168.56.93"
      port: 80
      targetPort: 9090
    prometheusSpec:
      ruleSelector:
          matchLabels:
            release: "{{ .Release.Name }}"
      ruleSelectorNilUsesHelmValues: false
  
  defaultRules:
    create: false

  prometheusOperator:
    admissionWebhooks:
      create:
        podAnnotations:
          sidecar.istio.io/inject: "false"
      patch:
        podAnnotations:
          sidecar.istio.io/inject: "false"
  
  alertmanager:
    alertmanagerSpec:
        secrets:
          - "alertmanager-smtp-password"
    
    config:
      global:
        resolve_timeout: 5m
        # Add your SMTP server details here
        smtp_smarthost: 'smtp.gmail.com:587'
        smtp_from: 'denskrlv@gmail.com'
        smtp_auth_username: 'denskrlv@gmail.com'
        # This references the secret you created
        smtp_auth_password_file: /etc/alertmanager/secrets/alertmanager-smtp-password/password
        smtp_require_tls: true

      route:
        group_by: ['alertname', 'severity', 'instance']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 3h
        receiver: 'default-email'
        routes:
          - matchers:
            - severity = critical
            receiver: 'critical-email'
            continue: true
          - matchers:
            - severity = warning
            receiver: 'warning-email'
            continue: true

      receivers:
        - name: "critical-email"
          email_configs:
            - to: "dkrylov@tudelft.nl"
              send_resolved: true
        - name: "warning-email"
          email_configs:
            - to: "dkrylov@tudelft.nl"
              send_resolved: true
        - name: "default-email"
          email_configs:
            - to: "dkrylov@tudelft.nl"
              send_resolved: true

apiIngress:
  hostname: api.local

appIngress:
  hostname: frontend.local