# Gateway
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: {{ .Release.Name }}-gateway
spec:
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "frontend.local"
---
# Virtual services
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ .Release.Name }}-virtual-service
spec:
  gateways: [ {{ .Release.Name }}-gateway ]
  hosts:
  - "frontend.local"
  http:
    # API documentation routes
    - match:
        - uri:
            exact: /model/apidocs
        - uri:
            prefix: /model/flasgger_static
        - uri:
            prefix: /model/apispec_
      route:
        - destination:
            host: {{ .Release.Name }}-{{ .Values.modelService.name }}
            port: { number: {{ .Values.modelService.servicePort }} }
      
    - match:
        - uri:
            exact: /app/apidocs
        - uri:
            prefix: /app/flasgger_static
        - uri:
            prefix: /app/apispec_
      route:
        - destination:
            host: {{ .Release.Name }}-{{ .Values.appService.name }}
            port: { number: {{ .Values.appService.servicePort }} }

    # model-service
    - match:
        - uri:
            prefix: /model
      rewrite:
        uri: /
      route:
        - destination:
            host: {{ .Release.Name }}-{{ .Values.modelService.name }}
            port: { number: {{ .Values.modelService.servicePort }} }

    # app-service
    - match:
        - uri:
            prefix: /api
      rewrite:
        uri: /
      route:
        - destination:
            host: {{ .Release.Name }}-{{ .Values.appService.name }}
            port: { number: {{ .Values.appService.servicePort }} }

    # frontend
    - match:
        - uri:
            prefix: /
      route:
        # Load balancing with 90% going to v1, 10% to v2
        - destination:
            host: {{ .Release.Name }}-{{ .Values.appFrontend.name }}
            subset: v1
            port: { number: {{ .Values.appFrontend.servicePort }} }
          weight: 90
        - destination:
            host: {{ .Release.Name }}-{{ .Values.appFrontend.name }}
            subset: v2
            port: { number: {{ .Values.appFrontend.servicePort }} }
          weight: 10
---
# Destination rule: app-service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ .Release.Name }}-{{ .Values.appService.name }}-destination-rule
spec:
  host: {{ .Release.Name }}-{{ .Values.appService.name }}
  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: x-sticky-user
---
# Destination rule: model-service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ .Release.Name }}-{{ .Values.modelService.name }}-destination-rule
spec:
  host: {{ .Release.Name }}-{{ .Values.modelService.name }}
  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: x-sticky-user
---
# Destination rule: frontend
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ .Release.Name }}-{{ .Values.appFrontend.name }}-destination-rule
spec:
  host: {{ .Release.Name }}-{{ .Values.appFrontend.name }}
  subsets:
    - name: v1
      labels: { version: v1 }
    - name: v2
      labels: { version: v2 }
  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpHeaderName: x-sticky-user
