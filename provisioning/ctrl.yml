- hosts: all
  become: yes
  tasks:
  - name: General setup
    ansible.builtin.include_tasks:
      file: general.yml
  

  # --------- STEP 13: Init cluster ---------
  - name: Check for admin.conf
    ansible.builtin.stat:
      path: /etc/kubernetes/admin.conf
    register: admin_conf_stat # Store the result

  - name: Cluster initialization using kubeadm
    ansible.builtin.shell:
      cmd: >
        kubeadm init
        --apiserver-advertise-address=192.168.56.100
        --node-name ctrl
        --pod-network-cidr=10.244.0.0/16
      creates: /etc/kubernetes/admin.conf
    when: not admin_conf_stat.stat.exists


  # --------- STEP 14: Setup kubectl ---------
  - name: Create .kube directory for vagrant user
    ansible.builtin.file:
      path: "/home/vagrant/.kube/"
      state: directory
      owner: vagrant
      group: vagrant
      mode: "0700"

  - name: Copy admin.conf to vagrant user's .kube directory
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: yes
      owner: vagrant
      group: vagrant
      mode: "0600"

  - name: Fetch admin.conf from controller to host machine
    ansible.builtin.Fetch:
      src: /etc/kubernetes/admin.conf
      dest: "{{ playbook_dir }}/config/"
      flat: yes

  - name: Display info about using the fetched kubeconfig (step 14)
    ansible.builtin.debug:
      msg: |
        ----------------------------------------------------------------------
        KUBECONFIG for host access has been fetched to: {{ playbook_dir }}/config/admin.conf
        You can use it with:
        export KUBECONFIG={{ playbook_dir }}/config/admin.conf
        or
        kubectl --kubeconfig={{ playbook_dir }}/config/admin.conf get nodes
        ----------------------------------------------------------------------
        REMEMBER TO ADD 'config/admin.conf' or 'config/' TO YOUR .gitignore FILE!
        ----------------------------------------------------------------------


  # --------- STEP 15: Create Pod Network ---------
  - name: Define Flannel URL and local storage path
    ansible.builtin.set_fact:
      flannel_url: "https://github.com/flannel-io/flannel/releases/download/v0.26.7/kube-flannel.yml"
      flannel_path: "/home/vagrant/kube-flannel.yml"
  
  - name: Download Flunnel
    ansible.builtin.shell:
      cmd: "curl -sSL -o {{ flannel_path }} '{{ flannel_url }}'"
      creates: "{{ flannel_path }}"
    become: no
  
  - name: Assign NIC for cluster communication
    ansible.builtin.lineinfile:
      path: "{{ flannel_path }}"
      insertafter: '^\s*- --kube-subnet-mgr'
      line: '        - --iface=eth1'
      firstmatch: yes # Apply the change only to the first match found in the file
    become: no

  - name: Apply Flannel using kubectl
    ansible.builtin.command:
      cmd: "kubectl apply -f {{ flannel_path }}"
    become: no
    environment:
      KUBECONFIG: "/home/vagrant/.kube/config"


  # --------- STEP 16: Install Helm ---------
  # - name: Setup Helm keys
  #   ansible.builtin.set_fact:
  #     helm_gpg_key_url: "https://baltocdn.com/helm/signing.asc"
  #     helm_keyring_path: "/usr/share/keyrings/helm.gpg"
  #     helm_apt_repo: "deb [arch=$(dpkg --print-architecture) signed-by={{ helm_keyring_path }}] https://baltocdn.com/helm/stable/debian/ all main"
    
  # - name: Ensure dependencies for adding apt repos are installed
  #   ansible.builtin.apt:
  #     name:
  #       - apt-transport-https
  #       - ca-certificates
  #       - curl
  #       - gnupg
  #     state: present
  #     update_cache: yes
  #   become: yes
